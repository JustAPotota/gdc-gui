local constants = require("main.constants")
local drivers = require("main.drivers")

local STATE_START = 0       -- List gamepads and wait for user to select one
local STATE_CALIBRATION = 1 -- Wait until no inputs are detected to get a baseline
local STATE_MAPPING = 2
local STATE_FINISHED = 3

local MAX_TRIGGER = 24
local CALIBRATION_TIME = 2
local MAP_TIME = 1

local COLOR_MOD_ACTIVE = vmath.vector4(0.14, 0.15, 0.16, 1)
local COLOR_MOD_INACTIVE = vmath.vector4(0.56, 0.57, 0.58, 1)

function table_empty(t)
	return next(t) == nil
end

-- Set the end of the node's text to "..." if it's too long
local function truncate_text(node)
	local font_name = gui.get_font(node)
	local font = gui.get_font_resource(font_name)

	local node_width = gui.get_size(node).x
	local text = gui.get_text(node)

	local metrics = resource.get_text_metrics(font, text)
	if metrics.width <= node_width then
		return
	end

	local length = #text
	repeat
		length = length - 1
		local metrics = resource.get_text_metrics(font, text:sub(1, length) .. "...")
	until metrics.width <= node_width

	gui.set_text(node, text:sub(1, length) .. "...")
end

---@param self any
---@param node userdata
---@param text string
local function add_tooltipable(self, node, text)
	table.insert(self.tooltipables, { node = node, text = text })
end

---@param node userdata
---@param text string
---@param action table
---@return boolean
local function draw_tooltipable(node, text, action)
	if gui.pick_node(node, action.x, action.y) then
		local tooltip_node = gui.get_node("tooltip")
		local text_node = gui.get_node("tooltip_text")
		local metrics = resource.get_text_metrics(gui.get_font_resource(gui.get_font(text_node)), text)
		gui.set_enabled(tooltip_node, true)
		gui.set_size(tooltip_node, vmath.vector3(metrics.width + 10, metrics.height + 10, 0))
		gui.set_size(text_node, vmath.vector3(metrics.width, metrics.height, 0))
		gui.set_text(text_node, text)
		return true
	end
	return false
end

local function set_progress(progress)
	gui.set_fill_angle(gui.get_node("progress"), progress * 360)
end

---@return integer dt
local function await_update()
	while true do
		local message_id, message = coroutine.yield()
		if message_id == "update" then return message.dt end
	end
end

---@return hash,table
local function await_input()
	while true do
		local message_id, message = coroutine.yield()
		if message_id == "input" then return message.action_id, message.action end
	end
end

local function button(node, action_id, action, on_click)
	if type(node) == "string" then
		node = gui.get_node(node .. "/root")
	end

	if not gui.is_enabled(node, true) then return end

	if action_id == hash("touch") then
		local size = gui.get_size(node)
		local position = gui.get_position(node)
		if action.pressed and gui.pick_node(node, action.x, action.y) then
			gui.play_flipbook(node, "grey_button13")
			gui.set_size(node, vmath.vector3(size.x, size.y - 4, size.z))
			gui.set_position(node, vmath.vector3(position.x, position.y - 2, position.z))
		elseif action.released and gui.get_flipbook(node) == hash("grey_button13") then
			gui.play_flipbook(node, "grey_button12")
			gui.set_size(node, vmath.vector3(size.x, size.y + 4, size.z))
			gui.set_position(node, vmath.vector3(position.x, position.y + 2, position.z))
			if gui.pick_node(node, action.x, action.y) then
				on_click()
				return true
			end
		end
	end
end

local function recreate_gamepad_list(self, gamepads)
	if self.gamepad_list_buttons then
		for i = 1, #self.gamepad_list_buttons do
			gui.delete_node(self.gamepad_list_buttons[i])
			self.gamepad_list_buttons[i] = nil
		end
	else
		self.gamepad_list_buttons = {}
	end

	if #gamepads == 0 then
		gui.set_text(gui.get_node("gamepad_list_header"), "Connect a gamepad...")
		return
	else
		gui.set_text(gui.get_node("gamepad_list_header"), "Select a gamepad:")
	end

	for i, gamepad in ipairs(gamepads) do
		local tree = gui.clone_tree(gui.get_node("controller_list_button"))
		local button = tree["controller_list_button"]
		local text = tree["controller_list_button_text"]
		gui.set_parent(button, gui.get_node("page_start"))
		gui.set_position(button, vmath.vector3(0, i * -60 + 150, 0))
		gui.set_text(text, gdc.get_gamepad_name(gamepad))
		truncate_text(text)

		self.gamepad_list_buttons[i] = button
	end
end

---@param map Map
local function update_trigger_nodes(nodes, map)
	gui.set_text(nodes.text, map.index or "-")

	if map.input_type == gdc.INPUT_TYPE_AXIS then
		gui.play_flipbook(nodes.type_icon, "generic_stick")
	elseif map.input_type == gdc.INPUT_TYPE_HAT then
		gui.play_flipbook(nodes.type_icon, "xbox_dpad")
	elseif map.input_type == gdc.INPUT_TYPE_BUTTON then
		gui.play_flipbook(nodes.type_icon, "generic_button")
	else
		gui.play_flipbook(nodes.type_icon, "generic_button_square_outline")
	end
end

local function begin_calibration(self)
	gui.set_text(gui.get_node("gamepad_header"), "Calibrating gamepad, please don't press anything...")
	gui.set_enabled(gui.get_node("page_start"), false)
	gui.set_enabled(gui.get_node("page_gamepad"), true)
	gui.set_enabled(gui.get_node("confirm_buttons"), false)
	gui.set_enabled(gui.get_node("skip_trigger/root"), false)
	timer.cancel(self.gamepad_timer)

	self.driver = drivers.find_driver(self.drivers, self.gamepad) or drivers.new_driver(self.gamepad)
	for i, map in ipairs(self.driver.maps) do
		update_trigger_nodes(self.trigger_nodes[map.trigger_id], map)
	end

	self.state = STATE_CALIBRATION
	self.calibration_timer = CALIBRATION_TIME
	self.baseline_packet = gdc.get_gamepad_packet(self.gamepad)
end

local function set_current_trigger(self, id)
	if self.current_trigger then
		gui.set_color(self.trigger_nodes[self.current_trigger].text, vmath.vector4(1, 1, 1, 1))
	end

	if id > MAX_TRIGGER then
		return true
	end

	gui.set_color(self.trigger_nodes[id].text, vmath.vector4(1, 0, 0, 1))
	self.driver.triggers[id] = {}
	self.current_trigger = id
end

local function begin_mapping(self)
	self.state = STATE_MAPPING
	self.map_timer = 0.5
	set_current_trigger(self, 0)
	gui.set_text(gui.get_node("gamepad_header"), "Press the highlighted button on your gamepad:")
	gui.set_enabled(gui.get_node("confirm_buttons"), false)
	gui.set_enabled(gui.get_node("skip_trigger/root"), true)
end

local function pretty_trigger_data(id, trigger_data)
	local trigger_name = gdc.get_trigger_name(id)
	local input_type = gdc.get_input_type_name(trigger_data.input_type)

	local modifiers = {}
	for modifier, enabled in pairs(trigger_data.modifiers) do
		if enabled then table.insert(modifiers, gdc.get_modifier_name(modifier)) end
	end

	local pretty = ("%s\nIndex: %d\nType: %s"):format(trigger_name, trigger_data.index, input_type)

	if #trigger_data.modifiers > 0 then
		pretty = pretty .. "\nModifiers: "
		for modifier, enabled in pairs(trigger_data.modifiers) do
			if enabled then
				pretty = pretty .. gdc.get_modifier_name(modifier) .. ", "
			end
		end
		pretty = pretty:sub(1, -3)
	end

	if trigger_data.hat_mask then
		local hat_mask_string = ""
		for i = 3, 0, -1 do
			if bit.band(trigger_data.hat_mask, bit.lshift(1, i)) > 0 then
				hat_mask_string = hat_mask_string .. "1"
			else
				hat_mask_string = hat_mask_string .. "0"
			end
		end
		pretty = pretty .. "\nHat mask: " .. hat_mask_string
	end

	return pretty
end

local function finish_mapping(self)
	self.state = STATE_FINISHED
	pprint(self.driver)
	print(drivers.driver_to_string(self.driver))
	gui.set_enabled(gui.get_node("confirm_buttons"), true)
	gui.set_enabled(gui.get_node("skip_trigger/root"), false)
	gui.set_text(gui.get_node("gamepad_header"), "")
end

local function next_trigger(self)
	local reached_last_trigger = set_current_trigger(self, self.current_trigger + 1)
	if reached_last_trigger then
		finish_mapping(self)
	end
	self.map_timer = 0.5
end

local function previous_trigger(self)
	if self.current_trigger <= 0 then return end
	set_current_trigger(self, self.current_trigger - 1)
	self.map_timer = 0.5
end

local function gamepad_timer(self)
	local new_gamepads = gdc.get_connected_gamepads()
	if #self.gamepads ~= #new_gamepads then
		recreate_gamepad_list(self, new_gamepads)
		self.gamepads = new_gamepads
	end
end

local function start_coroutine(self, fn)
	self.coroutine = coroutine.create(fn)
	assert(coroutine.resume(self.coroutine, self))
end

local co_main_menu, co_calibration, co_mapping, co_finished

function co_main_menu(self)
	gui.set_enabled(gui.get_node("page_start"), true)
	gui.set_enabled(gui.get_node("page_gamepad"), false)

	if self.gamepad_timer then timer.cancel(self.gamepad_timer) end
	self.gamepad_timer = timer.delay(0.5, true, gamepad_timer)

	while true do
		local action_id, action = await_input()

		if action_id == hash("touch") then
			for i, node in ipairs(self.gamepad_list_buttons) do
				local pressed = button(node, action_id, action, function()
					self.gamepad = self.gamepads[i]
					print("selected", gdc.get_gamepad_name(self.gamepad))
					start_coroutine(self, co_calibration)
				end)
				if pressed then return end
			end
		end
	end
end

function co_calibration(self)
	gui.set_text(gui.get_node("gamepad_header"), "Calibrating gamepad, please don't press anything...")
	gui.set_enabled(gui.get_node("page_start"), false)
	gui.set_enabled(gui.get_node("page_gamepad"), true)
	gui.set_enabled(gui.get_node("confirm_buttons"), false)
	gui.set_enabled(gui.get_node("skip_trigger/root"), false)
	timer.cancel(self.gamepad_timer)
	set_progress(0)

	self.driver = drivers.find_driver(self.drivers, self.gamepad) or drivers.new_driver(self.gamepad)
	for _, map in ipairs(self.driver.maps) do
		pprint(map)
		update_trigger_nodes(self.trigger_nodes[map.trigger_id], map)
	end

	self.baseline_packet = gdc.get_gamepad_packet(self.gamepad)

	local calibration_countdown = CALIBRATION_TIME
	while true do
		local dt = await_update()

		local packet = gdc.get_gamepad_packet(self.gamepad)
		local input_type, index, value, delta = gdc.compare_packets(self.baseline_packet, packet)
		self.baseline_packet = packet

		if math.abs(delta) > 0.015 then
			calibration_countdown = CALIBRATION_TIME
			set_progress(0)
		else
			calibration_countdown = calibration_countdown - dt
			if calibration_countdown <= 0 then
				set_progress(1)
				print("Calibration successful")
				start_coroutine(self, co_mapping)
				return
			end
			set_progress(calibration_countdown / CALIBRATION_TIME - 1)
		end
	end
end

function co_mapping(self)
	gui.set_text(gui.get_node("gamepad_header"), "Press the highlighted button on your gamepad:")
	gui.set_enabled(gui.get_node("confirm_buttons"), false)
	gui.set_enabled(gui.get_node("skip_trigger/root"), true)

	local map_countdown = MAP_TIME
	set_progress(0)

	local current_trigger_id = 0
	while true do
		local dt = await_update()

		local trigger_nodes = self.trigger_nodes[current_trigger_id]
		gui.set_color(trigger_nodes.text, vmath.vector4(1, 0, 0, 1))

		local packet = gdc.get_gamepad_packet(self.gamepad)
		local input_type, index, value, delta = gdc.compare_packets(self.baseline_packet, packet)

		if math.abs(delta) < 0.7 then
			map_countdown = MAP_TIME
			set_progress(0)
		else
			map_countdown = map_countdown - dt
			if map_countdown <= 0 then
				local map = drivers.find_map(self.driver, current_trigger_id)
				map.input_type = input_type
				map.index = index

				if input_type == gdc.INPUT_TYPE_HAT then
					map.hat_mask = value
				end

				map.modifiers = {
					[gdc.MODIFIER_NEGATE] = delta < 0,
					[gdc.MODIFIER_SCALE] = math.abs(delta) > 1.5,
					[gdc.MODIFIER_CLAMP] = math.abs(delta) <= 1.5 and input_type == gdc.INPUT_TYPE_AXIS,
				}

				update_trigger_nodes(trigger_nodes, map)

				current_trigger_id = current_trigger_id + 1
				map_countdown = MAP_TIME
				gui.set_color(trigger_nodes.text, vmath.vector4(1, 1, 1, 1))

				if current_trigger_id > constants.MAX_TRIGGER then
					return start_coroutine(self, co_finished)
				end
			end
			set_progress(map_countdown / MAP_TIME - 1)
		end
	end
end

function co_finished(self)
	gui.set_enabled(gui.get_node("confirm_buttons"), true)
	gui.set_enabled(gui.get_node("skip_trigger/root"), false)
	gui.set_text(gui.get_node("gamepad_header"), "")
	set_progress(1)

	while true do
		local action_id, action = await_input()

		local pressed = button("retry", action_id, action, function()
			start_coroutine(self, co_mapping)
		end)
		if pressed then return end

		local pressed = button("save", action_id, action, function()
			local file = assert(io.open(gdc.get_gamepad_name(self.gamepad) .. ".gamepads", "w"))
			file:write(drivers.driver_to_string(self.driver))
			file:close()
		end)
		if pressed then return end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	gui.set_enabled(gui.get_node("tooltip"), false)
	gui.set_enabled(gui.get_node("page_start"), true)
	gui.set_enabled(gui.get_node("page_gamepad"), false)

	self.tooltipables = {}

	self.trigger_nodes = {}
	for trigger_id = 0, MAX_TRIGGER do
		local template_name = "trigger_" .. trigger_id .. "/"
		local nodes = {
			root = gui.get_node(template_name .. "root"),
			icon = gui.get_node(template_name .. "icon"),
			type_icon = gui.get_node(template_name .. "type_icon"),
			text = gui.get_node(template_name .. "text")
		}

		self.trigger_nodes[trigger_id] = nodes
	end

	drivers.fetch_or_load_gamepads(function(drivers)
		pprint("gamepads", drivers)
		self.drivers = drivers

		self.gamepads = gdc.get_connected_gamepads()
		recreate_gamepad_list(self, self.gamepads)

		start_coroutine(self, co_main_menu)
	end)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.coroutine and coroutine.status(self.coroutine) == "suspended" then
		assert(coroutine.resume(self.coroutine, "update", { dt = dt }))
	end
	-- if self.state == STATE_CALIBRATION then
	-- 	-- Keep reading packets until no change is detected for CALIBRATION_TIME seconds
	-- 	-- then use that packet as the baseline to compare to (i.e. a packet with no buttons pressed)
	-- 	local packet = gdc.get_gamepad_packet(self.gamepad)
	-- 	local input_type, index, value, delta = gdc.compare_packets(self.baseline_packet, packet)
	-- 	self.baseline_packet = packet

	-- 	if math.abs(delta) > 0.015 then
	-- 		-- User pressed something, start the timer over
	-- 		self.calibration_timer = CALIBRATION_TIME
	-- 	else
	-- 		self.calibration_timer = self.calibration_timer - dt
	-- 		if self.calibration_timer <= 0 then
	-- 			begin_mapping(self)
	-- 			print("Calibration successful!")
	-- 		end
	-- 	end
	-- elseif self.state == STATE_MAPPING then
	-- 	local packet = gdc.get_gamepad_packet(self.gamepad)
	-- 	local input_type, index, value, delta = gdc.compare_packets(self.baseline_packet, packet)
	-- 	if math.abs(delta) < 0.7 then
	-- 		self.map_timer = 0.5
	-- 	else
	-- 		self.map_timer = self.map_timer - dt
	-- 		if self.map_timer <= 0 then
	-- 			local trigger_map = drivers.find_map(self.driver, self.current_trigger)
	-- 			trigger_map.input_type = input_type
	-- 			trigger_map.index = index

	-- 			if input_type == gdc.INPUT_TYPE_HAT then
	-- 				trigger_map.hat_mask = value
	-- 			end

	-- 			trigger_map.modifiers = {
	-- 				[gdc.MODIFIER_SCALE] = math.abs(delta) > 1.5,
	-- 				[gdc.MODIFIER_CLAMP] = math.abs(delta) <= 1.5 and input_type == gdc.INPUT_TYPE_AXIS,
	-- 				[gdc.MODIFIER_NEGATE] = delta < 0
	-- 			}

	-- 			pprint(self.current_trigger, trigger_map)
	-- 			update_trigger_nodes(self.trigger_nodes[self.current_trigger], trigger_map)

	-- 			next_trigger(self)
	-- 		end
	-- 	end
	-- end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if self.coroutine and coroutine.status(self.coroutine) == "suspended" then
		assert(coroutine.resume(self.coroutine, "input", { action_id = action_id, action = action }))
	end
	-- if action_id == hash("touch") then
	-- 	if self.state == STATE_START then
	-- 		for i, node in ipairs(self.gamepad_list_buttons) do
	-- 			button(node, action_id, action, function()
	-- 				self.gamepad = self.gamepads[i]
	-- 				print("selected", gdc.get_gamepad_name(self.gamepad))
	-- 				begin_calibration(self)
	-- 			end)
	-- 		end
	-- 	elseif self.state == STATE_MAPPING then
	-- 		button("skip_trigger", action_id, action, function()
	-- 			next_trigger(self)
	-- 		end)
	-- 	elseif self.state == STATE_FINISHED then
	-- 		button("retry", action_id, action, function()
	-- 			begin_calibration(self)
	-- 		end)
	-- 		button("save", action_id, action, function()
	-- 			print("woah")
	-- 		end)
	-- 	end
	-- end

	if not action_id then
		for _, tooltipable in ipairs(self.tooltipables) do
			local is_tooltip_shown = draw_tooltipable(tooltipable.node, tooltipable.text, action)
			if is_tooltip_shown then
				break
			else
				gui.set_enabled(gui.get_node("tooltip"), false)
			end
		end
	end

	-- if not action_id and self.state ~= STATE_START then
	-- 	local tooltip = gui.get_node("tooltip")
	-- 	local tooltip_text = gui.get_node("tooltip_text")
	-- 	local tooltip_pos = vmath.vector3(action.x + 10, action.y - 10, 0)

	-- 	if tooltip_pos.x + 250 > gui.get_width() then
	-- 		tooltip_pos.x = tooltip_pos.x - 200
	-- 	end

	-- 	gui.set_position(tooltip, tooltip_pos)

	-- 	if self.driver then
	-- 		for _, map in ipairs(self.driver.maps) do
	-- 			local trigger_id = map.index
	-- 			local nodes = self.trigger_nodes[trigger_id]
	-- 			local is_tooltip_shown = draw_tooltipable(nodes.root, pretty_trigger_data(trigger_id, map), action)

	-- 			if is_tooltip_shown then
	-- 				break
	-- 			else
	-- 				gui.set_enabled(tooltip, false)
	-- 			end
	-- 		end
	-- 	end
	-- end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
